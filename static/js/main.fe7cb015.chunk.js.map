{"version":3,"sources":["serviceWorker.js","index.js","App.js","components/FileUploadForm.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","XLSX","require","unzip","http","makeJob","values","loadedFiles","map","file","Promise","resolve","reject","log","request","res","pipe","Parse","on","entry","filePath","path","onSubmit","setSubmitting","JSON","stringify","setImmediate","_","jobs","all","data","filename","workbook","utils","book_new","sheet","json_to_sheet","Object","keys","x","assign","book_append_sheet","writeFile","saveAs","Array","prototype","concat","apply","useStyles","makeStyles","theme","backdrop","zIndex","drawer","color","FileUploadForm","classes","React","useState","open","setOpen","initialValues","submitForm","isSubmitting","setFieldValue","maxWidth","component","DropzoneArea","acceptedFiles","maxFileSize","filesLimit","showFileNames","onDrop","droppedFiles","onChange","length","URL","createObjectURL","type","name","variant","disabled","onClick","className"],"mappings":"2WAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,oDEzI5B,wCAEMC,EAAOC,EAAQ,KACfC,EAAQD,EAAQ,KAClBE,EAAOF,EAAQ,KAqCnB,SAASG,EAAQC,GACf,OAAOA,EAAOC,YAAYC,KAAI,SAAAC,GAC5B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3Bb,QAAQc,IAAIJ,GACZL,EAAKU,QAAQL,GAAM,SAASM,GAC1BA,EAAIC,KAAKb,EAAMc,SACdC,GAAG,SAAS,SAAUC,GACrB,IAAMC,EAAWD,EAAME,KACvBtB,QAAQc,IAAIO,eAkDPhC,IAnBf,WACE,OACE,kBAAC,IAAD,CAAgBkC,SAAU,SAAChB,EAAD,GAAgC,IAArBiB,EAAoB,EAApBA,cAEnC,OADAxB,QAAQc,IAAIW,KAAKC,UAAUnB,EAAQ,KAAM,IAClC,IAAII,SAAQ,SAACC,EAASC,GAC3Bc,GAAa,SAAAC,GACXhB,EAAQN,EAAQC,UAGnBZ,MAAK,SAAAkC,GAAI,OAAIlB,QAAQmB,IAAID,MACzBlC,MAAK,SAACoC,GACL,IAAMrB,EArFd,SAAgBqB,EAAMC,GACpB,IAAMC,EAAW/B,EAAKgC,MAAMC,WACtBC,EAAQlC,EAAKgC,MAAMG,cAAcN,GAKvC,OAFAO,OAAOC,KAAKH,GAAO3B,KAAI,SAAA+B,GAAC,OAAIJ,EAAMI,GAAKF,OAAOG,OAAOL,EAAMI,GAAI,CAAC,EAAK,SACrEtC,EAAKgC,MAAMQ,kBAAkBT,EAAUG,GAChClC,EAAKyC,UAAUV,EAAUD,GA8EbY,CAAOC,MAAMC,UAAUC,OAAOC,MAAM,GAAIjB,GAAO,iBAE5D,OADAP,GAAc,GACPb,QAAQC,QAAQF,Y,mKCrFzBuC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,SAAU,CACRC,OAAQF,EAAME,OAAOC,OAAS,EAC9BC,MAAO,YA+DIC,IA3Df,YAAuC,IAAbjC,EAAY,EAAZA,SAClBkC,EAAUR,IADoB,EAEZS,IAAMC,UAAS,GAFH,mBAE7BC,EAF6B,KAEvBC,EAFuB,KAIpC,OACE,kBAAC,IAAD,CACEC,cAAe,GACfvC,SAAUA,IAET,gBAAGwC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,cAA7B,OACC,kBAAC,IAAD,CAAWC,SAAS,MACpB,kBAAC,IAAD,KAEE,kCACE,iEAEA,kBAAC,IAAD,CAAOC,UAAWC,IACXC,cAAe,CACb,2BACA,oEACA,kBACA,2BACA,gCACFC,YAAa,IACbC,WAAY,GACZC,eAAe,EACfC,OAAQ,SAAAC,GACNb,GAAQ,GACR7D,QAAQc,IAAI4D,IAEdC,SAAU,SAAAnE,GACTqD,GAAQ,GACR7D,QAAQc,IAAI,yBACe,IAAvBN,EAAYoE,QACfX,EAAc,cAAezD,EAAYC,KAAI,SAAA+B,GAAC,OAAEqC,IAAIC,gBAAgBtC,UAE7E,2BAAOuC,KAAK,SAASC,KAAK,iBAG3BhB,GAAgB,kBAAC,IAAD,MACjB,6BACA,kBAAC,IAAD,CACEiB,QAAQ,YACR1B,MAAM,UACN2B,SAAUlB,EACVmB,QAASpB,GAJX,iBASF,kBAAC,IAAD,CAAUqB,UAAW3B,EAAQL,SAAUQ,KAAMA,GAC3C,kBAAC,IAAD,CAAkBL,MAAM,oB","file":"static/js/main.fe7cb015.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport FileUploadForm from './components/FileUploadForm.js'\r\nconst XLSX = require('xlsx')\r\nconst unzip = require('unzip-stream');\r\nvar http = require('http');\r\n\r\nfunction saveAs(data, filename) {\r\n  const workbook = XLSX.utils.book_new()\r\n  const sheet = XLSX.utils.json_to_sheet(data)\r\n   \r\n  // すべてのセルの書式設定を文字列にする\r\n  Object.keys(sheet).map(x => sheet[x] = Object.assign(sheet[x], {'z': '@'}))\r\n  XLSX.utils.book_append_sheet(workbook, sheet)\r\n  return XLSX.writeFile(workbook, filename)\r\n}\r\n\r\nfunction download(url, callback) {\r\n  var req = new XMLHttpRequest();\r\n  req.open(\"GET\", url, true);\r\n  req.responseType = \"arraybuffer\";\r\n  \r\n  req.onerror = () => {\r\n    callback(new Error(\"** An error occurred during the transaction\"))\r\n  };\r\n  req.onload = (e) => {\r\n    console.log(url);\r\n    callback(null, req.response)\r\n  }\r\n  \r\n  req.send();\r\n}\r\n\r\nfunction readXlsxAsJson(buf) {\r\n  var data = new Uint8Array(buf);\r\n  var workbook = XLSX.read(data, {type:\"array\"});\r\n\r\n  /* DO SOMETHING WITH workbook HERE */\r\n  const sheet1 = workbook.Sheets[workbook.SheetNames[0]]\r\n  return XLSX.utils.sheet_to_json(sheet1)\r\n}\r\n\r\nfunction makeJob(values) {\r\n  return values.loadedFiles.map(file => {\r\n    return new Promise((resolve, reject) => {\r\n      console.log(file)\r\n      http.request(file, function(res) {\r\n        res.pipe(unzip.Parse())\r\n        .on('entry', function (entry) {\r\n          const filePath = entry.path;\r\n          console.log(filePath)\r\n        })\r\n        /*\r\n        .on('end', _=>{\r\n          console.log('end')\r\n          resolve({})\r\n        })\r\n        */\r\n      \r\n      })\r\n    })\r\n\r\n    if(file.path.endsWith('zip')) {\r\n      \r\n      \r\n    } else {\r\n      return new Promise((resolve, reject) => {\r\n        download(file, (err, response) => {\r\n          if(err) {\r\n            reject(err)\r\n            return\r\n          }\r\n          const sheet1AsJson = readXlsxAsJson(response)\r\n          console.log(sheet1AsJson);\r\n          resolve(sheet1AsJson)\r\n        })\r\n      })  \r\n    }\r\n  })\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <FileUploadForm onSubmit={(values, { setSubmitting }) => {\r\n      console.log(JSON.stringify(values, null, 2));\r\n      return new Promise((resolve, reject) => {\r\n        setImmediate(_ => {\r\n          resolve(makeJob(values))\r\n        })\r\n      })\r\n      .then(jobs => Promise.all(jobs))\r\n      .then((data) => {\r\n        const file = saveAs(Array.prototype.concat.apply([], data), \"filename.xlsx\")\r\n        setSubmitting(false);\r\n        return Promise.resolve(file)\r\n      })\r\n    }} />\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { Container, Button, LinearProgress } from '@material-ui/core';\r\nimport {DropzoneArea} from 'material-ui-dropzone'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nfunction FileUploadForm({ onSubmit }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{}}      \r\n      onSubmit={onSubmit}\r\n    >\r\n      {({ submitForm, isSubmitting, setFieldValue }) => (\r\n        <Container maxWidth=\"sm\">\r\n        <Form>\r\n          \r\n          <fieldset>\r\n            <legend>Excelファイル</legend>\r\n\r\n            <Field component={DropzoneArea}\r\n                   acceptedFiles={[\r\n                     'application/vnd.ms-excel',\r\n                     'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n                     'application/zip',\r\n                     'application/x-compressed',\r\n                     'application/x-zip-compressed']}\r\n                   maxFileSize={10000000/* 10Mbytes */}\r\n                   filesLimit={99}\r\n                   showFileNames={true}\r\n                   onDrop={droppedFiles => {\r\n                     setOpen(true);\r\n                     console.log(droppedFiles)\r\n                   }}\r\n                   onChange={loadedFiles => {\r\n                    setOpen(false);\r\n                    console.log('DropzoneArea.onChange')\r\n                     if(loadedFiles.length === 0) return;\r\n                     setFieldValue('loadedFiles', loadedFiles.map(x=>URL.createObjectURL(x)))\r\n                   }} />\r\n            <input type=\"hidden\" name=\"loadedFiles\" />\r\n          </fieldset>\r\n\r\n          {isSubmitting && <LinearProgress />}\r\n          <br />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={isSubmitting}\r\n            onClick={submitForm}\r\n          >\r\n            結合\r\n          </Button>\r\n        </Form>\r\n        <Backdrop className={classes.backdrop} open={open} >\r\n          <CircularProgress color=\"inherit\" />\r\n        </Backdrop>\r\n        </Container>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default FileUploadForm;"],"sourceRoot":""}